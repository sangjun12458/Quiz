#include <iostream>
#include <queue>

using namespace std;

int n, m;
char map[10][10];
bool visited[10][10];
int blue[2], red[2], hole[2];
int dr[] = {-1, 0, 1, 0}, dc[] = {0, 1, 0, -1};
queue<pair<int, int>> q;
int cnt = 0;
bool finish = false;

void input()
{
    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> map[i][j];
            if (map[i][j] == 'B')
            {
                blue[0] = i;
                blue[1] = j;
            }
            else if (map[i][j] == 'R')
            {
                red[0] = i;
                red[1] = j;
            }
            else if (map[i][j] == 'O')
            {
                hole[0] = i;
                hole[1] = j;
            }
            visited[i][j] = false;
        }
    }
}
void print()
{
    cout << "\n\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
            cout << map[i][j];
        cout << '\n';
    }
}
void (ch)
void solve()
{
    int r, c, nr, nc;
    q.push(make_pair(red[0], red[1]));
    while (!q.empty())
    {
        r = q.front().first;
        c = q.front().second;
        q.pop();

        map[red[0]][red[1]] = '.';
        map[r][c] = 'R';

        for (int i = 0; i < 4; i++)
        {
            nr = r;
            nc = c;
            while (map[nr + dr[i]][nc + dc[i]] == '.')
            {
                nr += dr[i];
                nc += dc[i];
            }
            if (check_finish(i))
            {
                cout << cnt;
                exit(1);
            }
            if ((nr != r || nc != c) && !visited[nr][nc])
            {
                q.push(make_pair(nr, nc));
                visited[nr][nc] = 1;
                print();
            }
        }
    }
}

int main()
{
    input();
    solve();

    return 0;
}
